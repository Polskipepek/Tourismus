/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { ClientBase } from './ClientBase';
import moment from 'moment';

export class AuthenticateWithCredentialsClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    authenticate(action: AuthenticateWithCredentialsParameters, signal?: AbortSignal | undefined): Promise<User | null> {
        let url_ = this.baseUrl + "/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(action);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAuthenticate(_response));
        });
    }

    protected processAuthenticate(response: Response): Promise<User | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? User.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User | null>(<any>null);
    }
}

export class AuthorizationClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    authorize(signal?: AbortSignal | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Authorize";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAuthorize(_response));
        });
    }

    protected processAuthorize(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class CityClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    addNewCityAction(parameters: AddNewCityParameters, signal?: AbortSignal | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/cities/AddNewCityAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAddNewCityAction(_response));
        });
    }

    protected processAddNewCityAction(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    getCities(signal?: AbortSignal | undefined): Promise<City_Dto[] | null> {
        let url_ = this.baseUrl + "/api/cities/GetCities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCities(_response));
        });
    }

    protected processGetCities(response: Response): Promise<City_Dto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(City_Dto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<City_Dto[] | null>(<any>null);
    }

    removeCity(cityId: number, signal?: AbortSignal | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/cities/RemoveCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(cityId);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRemoveCity(_response));
        });
    }

    protected processRemoveCity(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class MealClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    addNewMealAction(parameters: AddNewMealParameters, signal?: AbortSignal | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/meals/AddNewMealAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAddNewMealAction(_response));
        });
    }

    protected processAddNewMealAction(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    getMeals(signal?: AbortSignal | undefined): Promise<Meal_Dto[] | null> {
        let url_ = this.baseUrl + "/api/meals/GetMeals";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMeals(_response));
        });
    }

    protected processGetMeals(response: Response): Promise<Meal_Dto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Meal_Dto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Meal_Dto[] | null>(<any>null);
    }

    removeMeal(mealId: number, signal?: AbortSignal | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/meals/RemoveMeal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(mealId);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRemoveMeal(_response));
        });
    }

    protected processRemoveMeal(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class CountryClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    addNewCountryAction(parameters: AddNewCountryParameters, signal?: AbortSignal | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/countries/AddNewCountryAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAddNewCountryAction(_response));
        });
    }

    protected processAddNewCountryAction(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    getCountries(signal?: AbortSignal | undefined): Promise<Country_Dto[] | null> {
        let url_ = this.baseUrl + "/api/countries/GetCountries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCountries(_response));
        });
    }

    protected processGetCountries(response: Response): Promise<Country_Dto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Country_Dto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Country_Dto[] | null>(<any>null);
    }

    removeCountry(cityId: number, signal?: AbortSignal | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/countries/RemoveCountry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(cityId);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRemoveCountry(_response));
        });
    }

    protected processRemoveCountry(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class HotelClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    addNewHotelAction(parameters: AddNewHotelParameters, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/hotels/AddNewHotelAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAddNewHotelAction(_response));
        });
    }

    protected processAddNewHotelAction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class OfferClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    addNewOfferAction(parameters: AddNewOfferParameters, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/offers/AddNewOfferAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAddNewOfferAction(_response));
        });
    }

    protected processAddNewOfferAction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class UserClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    addNewUserAction(parameters: AddNewUserParameters, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/AddNewUserAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAddNewUserAction(_response));
        });
    }

    protected processAddNewUserAction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    signOut(signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/SignOut";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            signal,
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processSignOut(_response));
        });
    }

    protected processSignOut(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class User implements IUser {
    id!: number;
    firstName!: string | undefined;
    lastName!: string | undefined;
    telephoneNumber!: string | undefined;
    email!: string | undefined;
    accountCreationDate!: moment.Moment;
    isAdmin!: boolean;
    token!: string | undefined;
    reservations!: Reservation[] | undefined;
    userCredentials!: UserCredential[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.telephoneNumber = _data["telephoneNumber"];
            this.email = _data["email"];
            this.accountCreationDate = _data["accountCreationDate"] ? moment(_data["accountCreationDate"].toString()) : <any>undefined;
            this.isAdmin = _data["isAdmin"];
            this.token = _data["token"];
            if (Array.isArray(_data["reservations"])) {
                this.reservations = [] as any;
                for (let item of _data["reservations"])
                    this.reservations!.push(Reservation.fromJS(item));
            }
            if (Array.isArray(_data["userCredentials"])) {
                this.userCredentials = [] as any;
                for (let item of _data["userCredentials"])
                    this.userCredentials!.push(UserCredential.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["telephoneNumber"] = this.telephoneNumber;
        data["email"] = this.email;
        data["accountCreationDate"] = this.accountCreationDate ? this.accountCreationDate.toISOString() : <any>undefined;
        data["isAdmin"] = this.isAdmin;
        data["token"] = this.token;
        if (Array.isArray(this.reservations)) {
            data["reservations"] = [];
            for (let item of this.reservations)
                data["reservations"].push(item.toJSON());
        }
        if (Array.isArray(this.userCredentials)) {
            data["userCredentials"] = [];
            for (let item of this.userCredentials)
                data["userCredentials"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUser {
    id: number;
    firstName: string | undefined;
    lastName: string | undefined;
    telephoneNumber: string | undefined;
    email: string | undefined;
    accountCreationDate: moment.Moment;
    isAdmin: boolean;
    token: string | undefined;
    reservations: Reservation[] | undefined;
    userCredentials: UserCredential[] | undefined;
}

export class Reservation implements IReservation {
    id!: number;
    offerId!: number;
    userId!: number;
    reservationDate!: moment.Moment;
    isPaid!: boolean;
    offer!: Offer | undefined;
    user!: User | undefined;

    constructor(data?: IReservation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.offerId = _data["offerId"];
            this.userId = _data["userId"];
            this.reservationDate = _data["reservationDate"] ? moment(_data["reservationDate"].toString()) : <any>undefined;
            this.isPaid = _data["isPaid"];
            this.offer = _data["offer"] ? Offer.fromJS(_data["offer"]) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Reservation {
        data = typeof data === 'object' ? data : {};
        let result = new Reservation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["offerId"] = this.offerId;
        data["userId"] = this.userId;
        data["reservationDate"] = this.reservationDate ? this.reservationDate.toISOString() : <any>undefined;
        data["isPaid"] = this.isPaid;
        data["offer"] = this.offer ? this.offer.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IReservation {
    id: number;
    offerId: number;
    userId: number;
    reservationDate: moment.Moment;
    isPaid: boolean;
    offer: Offer | undefined;
    user: User | undefined;
}

export class Offer implements IOffer {
    id!: number;
    hotelId!: number;
    cityId!: number;
    dateFrom!: moment.Moment;
    dateTo!: moment.Moment;
    price!: number;
    numberOfPeople!: number;
    description!: string | undefined;
    mealsId!: number | undefined;
    city!: City | undefined;
    hotel!: Hotel | undefined;
    meals!: Meal | undefined;
    reservations!: Reservation[] | undefined;

    constructor(data?: IOffer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hotelId = _data["hotelId"];
            this.cityId = _data["cityId"];
            this.dateFrom = _data["dateFrom"] ? moment(_data["dateFrom"].toString()) : <any>undefined;
            this.dateTo = _data["dateTo"] ? moment(_data["dateTo"].toString()) : <any>undefined;
            this.price = _data["price"];
            this.numberOfPeople = _data["numberOfPeople"];
            this.description = _data["description"];
            this.mealsId = _data["mealsId"];
            this.city = _data["city"] ? City.fromJS(_data["city"]) : <any>undefined;
            this.hotel = _data["hotel"] ? Hotel.fromJS(_data["hotel"]) : <any>undefined;
            this.meals = _data["meals"] ? Meal.fromJS(_data["meals"]) : <any>undefined;
            if (Array.isArray(_data["reservations"])) {
                this.reservations = [] as any;
                for (let item of _data["reservations"])
                    this.reservations!.push(Reservation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Offer {
        data = typeof data === 'object' ? data : {};
        let result = new Offer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hotelId"] = this.hotelId;
        data["cityId"] = this.cityId;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>undefined;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["numberOfPeople"] = this.numberOfPeople;
        data["description"] = this.description;
        data["mealsId"] = this.mealsId;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["hotel"] = this.hotel ? this.hotel.toJSON() : <any>undefined;
        data["meals"] = this.meals ? this.meals.toJSON() : <any>undefined;
        if (Array.isArray(this.reservations)) {
            data["reservations"] = [];
            for (let item of this.reservations)
                data["reservations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOffer {
    id: number;
    hotelId: number;
    cityId: number;
    dateFrom: moment.Moment;
    dateTo: moment.Moment;
    price: number;
    numberOfPeople: number;
    description: string | undefined;
    mealsId: number | undefined;
    city: City | undefined;
    hotel: Hotel | undefined;
    meals: Meal | undefined;
    reservations: Reservation[] | undefined;
}

export class City implements ICity {
    id!: number;
    name!: string | undefined;
    countryId!: number;
    isAirport!: boolean;
    country!: Country | undefined;
    hotels!: Hotel[] | undefined;
    offers!: Offer[] | undefined;

    constructor(data?: ICity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.countryId = _data["countryId"];
            this.isAirport = _data["isAirport"];
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>undefined;
            if (Array.isArray(_data["hotels"])) {
                this.hotels = [] as any;
                for (let item of _data["hotels"])
                    this.hotels!.push(Hotel.fromJS(item));
            }
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(Offer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): City {
        data = typeof data === 'object' ? data : {};
        let result = new City();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["countryId"] = this.countryId;
        data["isAirport"] = this.isAirport;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        if (Array.isArray(this.hotels)) {
            data["hotels"] = [];
            for (let item of this.hotels)
                data["hotels"].push(item.toJSON());
        }
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICity {
    id: number;
    name: string | undefined;
    countryId: number;
    isAirport: boolean;
    country: Country | undefined;
    hotels: Hotel[] | undefined;
    offers: Offer[] | undefined;
}

export class Country implements ICountry {
    id!: number;
    name!: string | undefined;
    cities!: City[] | undefined;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["cities"])) {
                this.cities = [] as any;
                for (let item of _data["cities"])
                    this.cities!.push(City.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.cities)) {
            data["cities"] = [];
            for (let item of this.cities)
                data["cities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICountry {
    id: number;
    name: string | undefined;
    cities: City[] | undefined;
}

export class Hotel implements IHotel {
    id!: number;
    name!: string | undefined;
    star!: number | undefined;
    cityId!: number | undefined;
    description!: string | undefined;
    photosPaths!: string | undefined;
    city!: City | undefined;
    offers!: Offer[] | undefined;

    constructor(data?: IHotel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.star = _data["star"];
            this.cityId = _data["cityId"];
            this.description = _data["description"];
            this.photosPaths = _data["photosPaths"];
            this.city = _data["city"] ? City.fromJS(_data["city"]) : <any>undefined;
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(Offer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Hotel {
        data = typeof data === 'object' ? data : {};
        let result = new Hotel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["star"] = this.star;
        data["cityId"] = this.cityId;
        data["description"] = this.description;
        data["photosPaths"] = this.photosPaths;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHotel {
    id: number;
    name: string | undefined;
    star: number | undefined;
    cityId: number | undefined;
    description: string | undefined;
    photosPaths: string | undefined;
    city: City | undefined;
    offers: Offer[] | undefined;
}

export class Meal implements IMeal {
    id!: number;
    name!: string | undefined;
    offers!: Offer[] | undefined;

    constructor(data?: IMeal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(Offer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Meal {
        data = typeof data === 'object' ? data : {};
        let result = new Meal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMeal {
    id: number;
    name: string | undefined;
    offers: Offer[] | undefined;
}

export class UserCredential implements IUserCredential {
    id!: number;
    salt!: string | undefined;
    hash!: string | undefined;
    userId!: number | undefined;
    user!: User | undefined;

    constructor(data?: IUserCredential) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.salt = _data["salt"];
            this.hash = _data["hash"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserCredential {
        data = typeof data === 'object' ? data : {};
        let result = new UserCredential();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["salt"] = this.salt;
        data["hash"] = this.hash;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUserCredential {
    id: number;
    salt: string | undefined;
    hash: string | undefined;
    userId: number | undefined;
    user: User | undefined;
}

export class AuthenticateWithCredentialsParameters implements IAuthenticateWithCredentialsParameters {
    mail!: string | undefined;
    password!: string | undefined;

    constructor(data?: IAuthenticateWithCredentialsParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mail = _data["mail"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AuthenticateWithCredentialsParameters {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateWithCredentialsParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mail"] = this.mail;
        data["password"] = this.password;
        return data; 
    }
}

export interface IAuthenticateWithCredentialsParameters {
    mail: string | undefined;
    password: string | undefined;
}

export class AddNewCityParameters implements IAddNewCityParameters {
    name!: string | undefined;
    countryId!: number;
    isAirport!: boolean;

    constructor(data?: IAddNewCityParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.countryId = _data["countryId"];
            this.isAirport = _data["isAirport"];
        }
    }

    static fromJS(data: any): AddNewCityParameters {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewCityParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["countryId"] = this.countryId;
        data["isAirport"] = this.isAirport;
        return data; 
    }
}

export interface IAddNewCityParameters {
    name: string | undefined;
    countryId: number;
    isAirport: boolean;
}

export class City_Dto implements ICity_Dto {
    id!: number;
    name!: string | undefined;
    countryName!: string | undefined;
    isAirport!: boolean;

    constructor(data?: ICity_Dto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.countryName = _data["countryName"];
            this.isAirport = _data["isAirport"];
        }
    }

    static fromJS(data: any): City_Dto {
        data = typeof data === 'object' ? data : {};
        let result = new City_Dto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["countryName"] = this.countryName;
        data["isAirport"] = this.isAirport;
        return data; 
    }
}

export interface ICity_Dto {
    id: number;
    name: string | undefined;
    countryName: string | undefined;
    isAirport: boolean;
}

export class AddNewMealParameters implements IAddNewMealParameters {
    name!: string | undefined;

    constructor(data?: IAddNewMealParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddNewMealParameters {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewMealParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IAddNewMealParameters {
    name: string | undefined;
}

export class Meal_Dto implements IMeal_Dto {
    id!: number;
    name!: string | undefined;

    constructor(data?: IMeal_Dto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Meal_Dto {
        data = typeof data === 'object' ? data : {};
        let result = new Meal_Dto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IMeal_Dto {
    id: number;
    name: string | undefined;
}

export class AddNewCountryParameters implements IAddNewCountryParameters {
    name!: string | undefined;

    constructor(data?: IAddNewCountryParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddNewCountryParameters {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewCountryParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IAddNewCountryParameters {
    name: string | undefined;
}

export class Country_Dto implements ICountry_Dto {
    id!: number;
    name!: string | undefined;

    constructor(data?: ICountry_Dto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Country_Dto {
        data = typeof data === 'object' ? data : {};
        let result = new Country_Dto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICountry_Dto {
    id: number;
    name: string | undefined;
}

export class AddNewHotelParameters implements IAddNewHotelParameters {
    name!: string | undefined;
    star!: number;
    cityId!: number | undefined;
    description!: string | undefined;
    photosPaths!: string | undefined;

    constructor(data?: IAddNewHotelParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.star = _data["star"];
            this.cityId = _data["cityId"];
            this.description = _data["description"];
            this.photosPaths = _data["photosPaths"];
        }
    }

    static fromJS(data: any): AddNewHotelParameters {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewHotelParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["star"] = this.star;
        data["cityId"] = this.cityId;
        data["description"] = this.description;
        data["photosPaths"] = this.photosPaths;
        return data; 
    }
}

export interface IAddNewHotelParameters {
    name: string | undefined;
    star: number;
    cityId: number | undefined;
    description: string | undefined;
    photosPaths: string | undefined;
}

export class AddNewOfferParameters implements IAddNewOfferParameters {
    hotelId!: number;
    cityId!: number;
    dateFrom!: moment.Moment;
    dateTo!: moment.Moment;
    price!: number;
    numberOfPeople!: number;
    photoPaths!: string | undefined;
    description!: string | undefined;
    mealsId!: number | undefined;

    constructor(data?: IAddNewOfferParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"];
            this.cityId = _data["cityId"];
            this.dateFrom = _data["dateFrom"] ? moment(_data["dateFrom"].toString()) : <any>undefined;
            this.dateTo = _data["dateTo"] ? moment(_data["dateTo"].toString()) : <any>undefined;
            this.price = _data["price"];
            this.numberOfPeople = _data["numberOfPeople"];
            this.photoPaths = _data["photoPaths"];
            this.description = _data["description"];
            this.mealsId = _data["mealsId"];
        }
    }

    static fromJS(data: any): AddNewOfferParameters {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewOfferParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId;
        data["cityId"] = this.cityId;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>undefined;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["numberOfPeople"] = this.numberOfPeople;
        data["photoPaths"] = this.photoPaths;
        data["description"] = this.description;
        data["mealsId"] = this.mealsId;
        return data; 
    }
}

export interface IAddNewOfferParameters {
    hotelId: number;
    cityId: number;
    dateFrom: moment.Moment;
    dateTo: moment.Moment;
    price: number;
    numberOfPeople: number;
    photoPaths: string | undefined;
    description: string | undefined;
    mealsId: number | undefined;
}

export class AddNewUserParameters implements IAddNewUserParameters {
    firstName!: string | undefined;
    lastName!: string | undefined;
    telephoneNumber!: string | undefined;
    email!: string | undefined;
    password!: string | undefined;

    constructor(data?: IAddNewUserParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.telephoneNumber = _data["telephoneNumber"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AddNewUserParameters {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewUserParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["telephoneNumber"] = this.telephoneNumber;
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface IAddNewUserParameters {
    firstName: string | undefined;
    lastName: string | undefined;
    telephoneNumber: string | undefined;
    email: string | undefined;
    password: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new SwaggerException(message, status, response, headers, result);
}
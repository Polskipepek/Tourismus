<Project Sdk="Microsoft.NET.Sdk.Web">

	<PropertyGroup>
		<TargetFramework>net5.0</TargetFramework>
		<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
		<TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
		<IsPackable>false</IsPackable>
		<SpaRoot>ClientApp\</SpaRoot>
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Autofac.Extensions.DependencyInjection" Version="7.1.0" />
		<PackageReference Include="Faker.Net" Version="1.5.150" />
		<PackageReference Include="faker-csharp" Version="2.0.0" />
		<PackageReference Include="Microsoft.AspNetCore.OData" Version="7.5.6" />
		<PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="5.0.3" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="5.0.0">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="5.0.13" />
		<PackageReference Include="Microsoft.OData.Core" Version="7.8.3" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
		<PackageReference Include="NSwag.Annotations" Version="13.10.8" />
		<PackageReference Include="NSwag.MSBuild" Version="13.10.8">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\Helpers\Helpers.csproj" />
		<ProjectReference Include="..\Tourismus.FakeData\Tourismus.FakeData.csproj" />
		<ProjectReference Include="..\Tourismus.Model\Tourismus.Model.csproj" />
	</ItemGroup>

	<ItemGroup>
		<None Update="ClientApp\src\services\Dtos\City_Dto.ts">
		  <CustomToolNamespace>ReadModels\Dtos\ControllerBase\City_Dto.cs</CustomToolNamespace>
		</None>
		<None Update="ClientApp\src\services\Dtos\Country_Dto.ts">
		  <CustomToolNamespace>ReadModels\Dtos\ControllerBase\Country_Dto.cs</CustomToolNamespace>
		</None>
		<None Update="ClientApp\src\services\ListDtos\Hotel_ListDto.ts">
		  <CustomToolNamespace>ReadModels\Dtos\List\Hotel_ListDto.cs</CustomToolNamespace>
		</None>
		<None Update="ClientApp\src\services\ListDtos\Meal_ListDto.ts">
		  <CustomToolNamespace>ReadModels\Dtos\List\Meal_ListDto.cs</CustomToolNamespace>
		</None>
		<None Update="ClientApp\src\services\ListDtos\Offer_ListDto.ts">
			<CustomToolNamespace>ReadModels\Dtos\List\Offer_ListDto.cs</CustomToolNamespace>
		</None>
		<None Update="ClientApp\src\services\SingleDto\Offer_DetailsDto.ts">
			<CustomToolNamespace>ReadModels\Dtos\Single\Offer_DetailsDto.cs</CustomToolNamespace>
		</None>
		<None Update="ClientApp\src\services\SingleDto\User_DetailsDto.ts">
		  <CustomToolNamespace>ReadModels\Dtos\Single\User_DetailsDto.cs</CustomToolNamespace>
		</None>
	</ItemGroup>
	
	<Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
	</Target>

	<Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

		<!-- Include the newly-built files in the publish output -->
		<ItemGroup>
			<DistFiles Include="$(SpaRoot)build\**" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>%(DistFiles.Identity)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
				<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>
	
	<PropertyGroup>
		<RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
	</PropertyGroup>



	<Target Name="NSwag" AfterTargets="Build">
		<Exec Command="$(NSwagExe) run /variables:assemblyPath=$(OutDir)/Tourismus.WebApp.exe,clientOutput=ClientApp/src/services/GeneratedClient.ts" />
	</Target>


	<Target Name="NSwag" AfterTargets="Build">
		<Copy SourceFiles="@(ReferencePath)" DestinationFolder="$(OutDir)References" />
		<Exec Command="$(NSwagExe_Net50) run nswag.json /variables:Configuration=$(Configuration),OutDir=$(OutDir),assemblyPath=$(OutDir)/Tourismus.WebApp.dll,clientOutput=ClientApp/src/services/GeneratedClient.ts" />
		<RemoveDir Directories="$(OutDir)References" />
	</Target>


	<Target Name="PostBuild" AfterTargets="PostBuildEvent">
	  <Exec Command="tasklist | find /i &quot;node.exe&quot; &amp;&amp; taskkill /im node.exe /F || echo process &quot;node.exe&quot; not running" />
	</Target>
	
	
</Project>
